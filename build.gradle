/**
 * Copyright (c) 2014, XebiaLabs B.V., All rights reserved.
 *
 *
 * The XL Deploy plugin for Jenkins is licensed under the terms of the GPLv2
 * <http://www.gnu.org/licenses/old-licenses/gpl-2.0.html>, like most XebiaLabs Libraries.
 * There are special exceptions to the terms and conditions of the GPLv2 as it is applied to
 * this software, see the FLOSS License Exception
 * <https://github.com/jenkinsci/deployit-plugin/blob/master/LICENSE>.
 *
 * This program is free software; you can redistribute it and/or modify it under the terms
 * of the GNU General Public License as published by the Free Software Foundation; version 2
 * of the License.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this
 * program; if not, write to the Free Software Foundation, Inc., 51 Franklin St, Fifth
 * Floor, Boston, MA 02110-1301  USA
 */

apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'jpi'
apply plugin: 'obake'
apply plugin: 'provided-base'
apply plugin: 'net.researchgate.release'

build.dependsOn jpi

task deleteGeneratedSrcLocalizer(type: Delete) {
    delete "build/generated-src/localizer"
}

localizer.dependsOn deleteGeneratedSrcLocalizer

repositories {
    mavenCentral()
    jcenter()
    maven { url "https://plugins.gradle.org/m2/" }
    maven { url "http://repo.jenkins-ci.org/releases" }
    maven { url "http://www.knopflerfish.org/maven2" }
    maven { url "https://dist.xebialabs.com/public/maven2" }
    maven { url "https://repo.jenkins-ci.org/public" }
}


buildscript {
    repositories {
        // The plugin is currently only available via the Jenkins
        // Maven repository, but has dependencies in Maven Central.
        mavenCentral()
        jcenter()
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "http://repo.jenkins-ci.org/releases" }
        maven { url "http://www.knopflerfish.org/maven2" }
        maven { url "https://dist.xebialabs.com/public/maven2" }
        maven { url "https://repo.jenkins-ci.org/public" }
    }
    dependencies {
        classpath 'org.jenkins-ci.tools:gradle-jpi-plugin:0.19.0'
        classpath 'org.bitbucket.grimrose:gradle-obake-plugin:0.5'
        classpath 'com.netflix.nebula:gradle-extra-configurations-plugin:1.12.+'
        classpath 'net.researchgate:gradle-release:2.8.1'
    }
}


jenkinsPlugin {
    coreVersion = '1.642.3' // we need to support LTS versions
    shortName = "deployit-plugin" // short name of the plugin is the ID that uniquely identifies a plugin
    displayName = "XebiaLabs XL Deploy Plugin"
    url = 'https://github.com/jenkinsci/xldeploy-plugin/blob/master/docs/README.md'
    gitHubUrl = 'https://github.com/jenkinsci/xldeploy-plugin'


    developers {
        developer {
            id 'XebiaLabsCI'
            name 'XebiaLabs'
            email 'xl-developers (at) xebialabs (dot) com'
        }
    }
}

// Per default Jenkins loads every jar from WEB-INF/lib, along with the contents of WEB-INF/classes after the classes and libraries of the core.
// If you want to have your own libaries loaded before these (e.g. you want a newer version of velocity or an other library),
// you can configure your plugin to use a different classloader strategy
tasks.jpi.manifest.attributes(["PluginFirstClassLoader": "true"])

server.doFirst {
    org.jenkinsci.gradle.plugins.jpi.JpiHplManifest.metaClass.writeTo = { File f ->
        def m = new java.util.jar.Manifest()
        m.mainAttributes.putValue("Manifest-Version", "1.0")
        m.mainAttributes.putValue("PluginFirstClassLoader", "true")
        delegate.each { k, v ->
            m.mainAttributes.putValue(k, v.toString())
        }
        f.withOutputStream { o -> m.write(o); }
    }
}


configurations {
    compile.transitive = true
    compile.exclude group: 'com.xebialabs.xl-platform', module: 'xl-utils'
    providedRuntime.exclude group: 'jdom', module: 'jdom'
    //Engine packager requires JDOM2. Exclude from config so that it is included in the hpi Web-Inf lib.
    providedRuntime.exclude group: 'de.schlichtherle.truezip', module: 'truezip-path'
    // needs Java7, borks on Java6 setups
    all*.exclude group: 'com.thoughtworks.xstream', module: "xstream"
    // this artifact lives in a netbeans repository which behaves flakey
    // it's not used so exclude it.
    testCompile.exclude group: 'org.netbeans.modules', module: "org-netbeans-insane"
    providedRuntime.exclude group: 'ch.qos.logback', module: 'logback-classic'
    providedRuntime.exclude group: 'ch.qos.logback', module: 'logback-core'
    providedRuntime.exclude group: 'org.slf4j', module: 'slf4j-api'
    providedRuntime.exclude group: 'org.slf4j', module: 'jcl-over-slf4j'
    providedRuntime.exclude group: 'org.slf4j', module: 'log4j-over-slf4j'
    slf4j
}

ext {
    xlPlatformVersion = "2016.2.6"

}

dependencies {
    compile "com.xebialabs.deployit.engine:packager:$xlPlatformVersion"
    compile "com.xebialabs.deployit:engine-api:$xlPlatformVersion"
    compile "com.xebialabs.deployit.engine:remote-booter:$xlPlatformVersion"
    compile "org.jdom:jdom2:2.0.5"

    provided 'org.slf4j:slf4j-api:1.7.7'

    jenkinsPlugins "org.jenkins-ci.plugins:credentials:1.16.1@jar"
    jenkinsPlugins "org.jenkins-ci.plugins.workflow:workflow-step-api:1.10@jar"

    compile 'com.google.code.findbugs:jsr305:2.0.2'
    compile 'findbugs:annotations:1.0.0'
    compile "com.google.guava:guava:16.0.1"

    testCompile "junit:junit:4.11"
    testCompile "org.mockito:mockito-all:1.9.5"
    testCompile "org.jenkins-ci.plugins:cloudbees-folder:6.0.4@jar"
    testCompile "org.jenkins-ci.main:jenkins-test-harness:2.15"
    testCompile "org.jenkins-ci.plugins.workflow:workflow-aggregator:1.10@jar"
    testCompile "org.jenkins-ci.plugins.workflow:workflow-support:1.10@jar"
    testCompile "org.jenkins-ci.plugins.workflow:workflow-scm-step:1.10@jar"
    testCompile "org.jenkins-ci.plugins:scm-api:1.1@jar"


    slf4j "org.slf4j:slf4j-api:1.7.7"
    slf4j "org.slf4j:log4j-over-slf4j:1.7.7"
    slf4j "org.slf4j:jcl-over-slf4j:1.7.7"
    slf4j "org.slf4j:slf4j-jdk14:1.7.7"
    slf4j "org.slf4j:slf4j-simple:1.7.7"

    jenkinsTest('org.jenkins-ci.main:maven-plugin:1.480@hpi') { transitive = true }
    jenkinsTest("org.jenkins-ci.plugins:credentials:1.16.1@hpi") { transitive = true }

    testCompile "org.jenkins-ci.plugins.workflow:workflow-job:1.10@jar"
    testCompile "org.jenkins-ci.plugins.workflow:workflow-cps:1.10@jar"
    testCompile "org.jenkins-ci.plugins.workflow:workflow-api:1.10@jar"

    jenkinsTest("org.jenkins-ci.plugins.workflow:workflow-step-api:1.10@hpi") { transitive = true }
    jenkinsTest("org.jenkins-ci.plugins.workflow:workflow-support:1.10@hpi") { transitive = true }
    jenkinsTest("org.jenkins-ci.plugins.workflow:workflow-cps:1.10@hpi") { transitive = true }
    jenkinsTest("org.jenkins-ci.plugins:git:3.0.1@hpi") { transitive = true }
    jenkinsTest("org.jenkins-ci.plugins.workflow:workflow-aggregator:1.10@hpi") { transitive = true }

}

release {
    buildTasks = ['publish']
    tagTemplate = 'xldeploy-plugin-$version'
    preTagCommitMessage = 'Released Jenkins XL Deploy plugin '
    tagCommitMessage = 'Tag for xldeploy-plugin-$version'
    newVersionCommitMessage = 'Set development version to '
}

test {
    exclude '**/*ITest*'
}

task itest(type: Test) {
    description = "Run integration tests"
    classpath = project.sourceSets.test.runtimeClasspath + configurations.slf4j
}

if (project.hasProperty('xlDeployIntegration.host')) {
    def host = project.property('xlDeployIntegration.host')
    def username = project.property('xlDeployIntegration.username')
    def password = project.property('xlDeployIntegration.password')
    test.systemProperties([
            "xlDeployIntegration.host"    : "$host",
            "xlDeployIntegration.username": "$username",
            "xlDeployIntegration.password": "$password"
    ])
}

task checkJavaVersion {
    doLast {
        def majorVersion = project.version.tokenize('.')[0].toInteger()
        def message = "This build must be run with java"
        if (majorVersion < 6 && JavaVersion.current() != JavaVersion.VERSION_1_7) {
            throw new GradleException("${message} ${JavaVersion.VERSION_1_7}")
        }
        if (majorVersion >= 6 && JavaVersion.current() != JavaVersion.VERSION_1_8) {
            throw new GradleException("${message} ${JavaVersion.VERSION_1_8}")
        }
    }
}

